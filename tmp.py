import cmd
import shlex
import os
import cv2
import numpy as np
from pathlib import Path

class ImageCLI(cmd.Cmd):
    prompt = "üñºÔ∏è> "
    intro = "Image Manager CLI. –ù–∞–ø–∏—à–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    
    def __init__(self):
        super().__init__()
        self.work_dir = os.getcwd()
        self.image_history = {}  # {–ø—É—Ç—å: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ}
        self.current_image = None
        self.current_path = None

    # ------ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ ------
    def do_loadimg(self, arg):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: loadimg <–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É>"""
        if not arg:
            print("–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
            return
        
        try:
            args = shlex.split(arg)
            if len(args) > 1:
                print("–û—à–∏–±–∫–∞: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
                return
                
            path = Path(args[0]).expanduser().absolute()
            
            if not path.exists():
                print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
                return
                
            if path.is_dir():
                print(f"–û—à–∏–±–∫–∞: {path} —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
            valid_ext = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']
            if path.suffix.lower() not in valid_ext:
                print(f"–û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {path.suffix}")
                return
                
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = cv2.imread(str(path))
            if img is None:
                print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return
                
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            self.image_history[str(path)] = img
            self.current_image = img
            self.current_path = path
            
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            h, w = img.shape[:2]
            channels = "—Ü–≤–µ—Ç–Ω–æ–µ" if len(img.shape) == 3 else "—á/–±"
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {path.name}")
            print(f"–†–∞–∑–º–µ—Ä: {w}x{h} –ø–∏–∫—Å–µ–ª–µ–π, {channels}")
            print(f"–ü—É—Ç—å: {path}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

    def do_showimg(self, arg):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: showimg [–∏–Ω–¥–µ–∫—Å|–ø—É—Ç—å]"""
        if not arg:
            self._list_images()
            return
            
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
            index = int(arg) - 1
            if 0 <= index < len(self.image_history):
                path = list(self.image_history.keys())[index]
                img = self.image_history[path]
            else:
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
                return
        except ValueError:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –ø—É—Ç—å
            path = str(Path(arg).expanduser().absolute())
            if path not in self.image_history:
                print(f"–û—à–∏–±–∫–∞: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏")
                return
            img = self.image_history[path]
        
        # –ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self._display_image(img, path)

    def do_histimg(self, arg):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: histimg"""
        if not self.image_history:
            print("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç–∞")
            return
            
        print("\n–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
        for i, path in enumerate(self.image_history.keys(), 1):
            img = self.image_history[path]
            h, w = img.shape[:2]
            print(f"{i:2d}. {Path(path).name} ({w}x{h}) - {path}")

    def do_delimg(self, arg):
        """–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: delimg [–∏–Ω–¥–µ–∫—Å|–ø—É—Ç—å]"""
        if not arg:
            print("–£–∫–∞–∂–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –ø—É—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
            
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            index = int(arg) - 1
            if 0 <= index < len(self.image_history):
                path = list(self.image_history.keys())[index]
                del self.image_history[path]
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {Path(path).name}")
            else:
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        except ValueError:
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏
            path = str(Path(arg).expanduser().absolute())
            if path in self.image_history:
                del self.image_history[path]
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {Path(path).name}")
            else:
                print("–û—à–∏–±–∫–∞: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏")

    # ------ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ------
    def complete_loadimg(self, text, line, begidx, endidx):
        """–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        return self._complete_image_paths(text)
    
    def complete_showimg(self, text, line, begidx, endidx):
        """–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        return self._complete_image_history(text)
    
    def complete_delimg(self, text, line, begidx, endidx):
        """–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        return self._complete_image_history(text)

    def _complete_image_paths(self, text):
        """–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"""
        path = Path(text or ".").expanduser()
        dir_path = str(path.parent) if text else str(Path.cwd())
        
        if not Path(dir_path).is_dir():
            return []
        
        # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        valid_ext = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']
        
        completions = []
        for item in Path(dir_path).iterdir():
            if not text or item.name.startswith(path.name):
                if item.is_dir():
                    completions.append(f"{item.name}/")
                elif item.is_file() and item.suffix.lower() in valid_ext:
                    completions.append(str(item))
        return completions

    def _complete_image_history(self, text):
        """–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if not text:
            return list(self.image_history.keys())
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø—É—Ç–∏
        completions = []
        for path in self.image_history:
            if text in path or text in Path(path).name:
                completions.append(path)
        return completions

    # ------ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ------
    def _display_image(self, img, title):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é OpenCV"""
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        h, w = img.shape[:2]
        max_size = 800
        
        if w > max_size or h > max_size:
            scale = max_size / max(w, h)
            new_w = int(w * scale)
            new_h = int(h * scale)
            img_resized = cv2.resize(img, (new_w, new_h))
        else:
            img_resized = img
        
        # –ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cv2.imshow(title, img_resized)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

    def _list_images(self):
        """–°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
        if not self.image_history:
            print("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—É—Å—Ç–∞")
            return
            
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'showimg <–Ω–æ–º–µ—Ä>'):")
        for i, path in enumerate(self.image_history.keys(), 1):
            img = self.image_history[path]
            h, w = img.shape[:2]
            print(f"{i:2d}. {Path(path).name} ({w}x{h})")

    # ------ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ------
    def do_exit(self, arg):
        """–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: exit"""
        cv2.destroyAllWindows()
        print("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True

    # –°–∏–Ω–æ–Ω–∏–º—ã
    do_quit = do_exit
    do_q = do_exit

if __name__ == "__main__":
    ImageCLI().cmdloop()